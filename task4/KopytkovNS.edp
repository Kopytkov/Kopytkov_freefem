load "iovtk"

/*Domain a geometry*/
real H = 0.41; /* [m] Height of the tube*/

real L = 1.42; /* [m] Length of the tube*/

real mu = 1e-3; /* [Pa*s] Dynamic viscosity */
real rho = 1e3; /* [kg/m^3] Density */

real cx0 = 0.2;
real cy0 = 0.2;
real R = 0.05; /* [m] Radius of cylinder */

real t = 0;
real dt = 0.1;
real T = 30;
real u0 = 0.1; 
real p0 = 1e5;
real eps0 = 1e-3;
func uin = u0 + eps0*sin(t)*cos(y/H); /* [m/s] Start profil */;

/*Mesh definition */
int n = 12;

int[int] labelWall = [1, 3, 5];
int[int] labelInlet = [4];
int[int] labelOutlet = [2];

//mesh
border GB(t = 0, L){ x = t; y = 0; label = 1;}
border GOut(t = 0, H){ x = L; y = t; label = 2; }
border GT(t = 0, L){ x = L-t; y = H; label = 3; }
border GIn(t = 0, H){ x = 0; y = H-t; label = 4; }
border Cylinder(t = 0, 2.0*pi){x = cx0 + R*cos(t); y = cy0 + R*sin(t); label = 5;}
mesh Th = buildmesh( GB(5*n) + GOut(n) + GT(5*n) + GIn(n) + Cylinder(-n*3));
plot(Th);

/*Differential operators*/
macro grad(u) [dx(u), dy(u)] //EOM  /*EOM = End Of Macros*/
macro gradVec(u1, u2) [dx(u1), dy(u1), dx(u2), dy(u2)] //EOM
macro div(u1, u2) (dx(u1) + dy(u2)) //EOM
macro uGradV(u1, u2, v1, v2)
    [
        [u1, u2]'*grad(v1),
        [u1, u2]'*grad(v2)
    ] //EOM

/*Finite element space*/
fespace Vh(Th, [P2, P2, P1]);
fespace Vh1(Th, P1);
fespace Vh2(Th, P2); /*P1dc*/

Vh [u1, u2, p]; /* Solution at k-th iteration*/
Vh [v1, v2, q];
Vh2 up1, up2, f;
Vh1 u1P1, u2P1;

real epsilon = 1e-10;
real alpha = rho/dt;
int iIter = 0;
real error = 0.01;

problem NStocks ([u1, u2, p], [v1, v2, q]) = 
    int2d(Th)(
        alpha*[u1, u2]'*[v1, v2]
        + mu*gradVec(u1, u2)'*gradVec(v1, v2)
        - p*div(v1, v2)
        + p*q*epsilon
        + q*div(u1, u2)
    )
    + int2d(Th)(
        - alpha*convect([up1,up2],-dt,up1)*v1 
        - alpha*convect([up1,up2],-dt,up2)*v2
    )
    + on(labelInlet, u1=uin, u2=0)
    + on(labelWall, u1=0, u2=0)
    + on(labelOutlet, u2=0, u1=f, p=p0);

int beta = 60;
int K = int(beta/(n*u0)); /* param for adapt */
int[int] order = [1, 1, 1];

/* Save the mesh to .vtu-file */
ofstream pvdFile("solution.pvd");
pvdFile << "<?xml version=\"1.0\"?>\n";
pvdFile << "<VTKFile type=\"Collection\" version=\"0.1\" byte_order=\"LittleEndian\">\n";
pvdFile << "  <Collection>\n";

while (t < T){
    NStocks;
    u1P1 = u1;
    u2P1 = u2;
    /* Save the mesh to .vtu-file */
    string filename = "sol" + iIter + ".vtu";
    savevtk(filename, Th, [u1P1, u2P1], p, order=order);
    pvdFile << "<DataSet timestep=\"" << t << "\" group=\"\" part=\"0\" file=\"" << filename << "\"/>\n";
    plot (Th, u1, fill=1, value=1, nbiso=40, wait=1, cmm="iIter = " + iIter);
    if (iIter == K){
        Th = adaptmesh(Th, [u1, u2],
            err = error,
            iso = true);
        error = error / 2.0;
    }
    /* Update */
    up1 = u1;
    up2 = u2;
    iIter++;
    t += dt;
    f = convect([u1, u2], -dt, up1);
}
pvdFile << "  </Collection>\n";
pvdFile << "</VTKFile>\n";
