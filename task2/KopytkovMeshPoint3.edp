int labelOut = 1;  /* label for outer circle*/
int labelLeftInnerEllipse = 2; /* label for left inner ellipse */
int labelRightInnerEllipse = 3; /* label for right inner ellipse */
int labelInnerSmile = 4; /* label for inner Smile*/

/* coordinates of circle */
real xMin = 1.0;
real xMax = 11.0;
real yMin = 1.0;
real yMax = 8.0;
real xCenter = (xMin + xMax) / 2.0;
real yCenter = (yMin + yMax) / 2.0;

real ROut = 12.0; /*radius of GammaOut*/

border GammaOut(t = 0.0, 2.0*pi){
    x = xCenter + ROut*cos(t);
    y = yCenter + ROut*sin(t);
    label = labelOut;
}

/*param of inner Ellipses*/
real aEll = 1.3;
real bEll = 0.7;
real xInLE = xMin;
real xInRE = xMax;
real ydist = 2.0; /*y-center offset*/
real ellDisp = (yMax + yMin)/2.0 + ydist; /*Elliptical displacement*/

border innerEllipse1(t= 0.0, 2*pi){ 
    x = xInLE +  aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelLeftInnerEllipse ;
}

border innerEllipse2(t= 0.0, 2*pi){ 
    x = xInRE + aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelRightInnerEllipse ;
}

/*param of Smile*/
real aSmile = 2.2;
real bSmile = 0.8;
real xSmile = xCenter;
real SmileDisp = (yMax + yMin)/2.0 - ydist; /*Elliptical displacement*/
real deform = 2.0; /*param of deform*/

/* Func for create a Smile */
func real deformation(real y) {
    return y * (1 - deform * y); /* “squeeze” the top */
}

/* Top part of Smile */
border upperEllipse(t = 0, pi) {
    x = xSmile + aSmile * cos(t);
    y = deformation(bSmile * sin(t)) + SmileDisp;
    label = labelInnerSmile;
}

/* Bottom part of Smile (for closing the loop) */
border lowerEllipse(t = pi, 0) {
    x = xSmile + aSmile * cos(t);
    y = -bSmile * sin(t) + SmileDisp;
    label = labelInnerSmile;
}

/*define a params*/
int NOut = 40;
int NIn = 20;

mesh Th1 = buildmesh(GammaOut(NOut)
    + innerEllipse1(-NIn) + innerEllipse2(-NIn)
    + upperEllipse(-NIn) + lowerEllipse(-NIn));
plot(Th1, wait = true, dim=2);

/*define u, f and boundary conditions*/
func uExactFunc = x*sin(pi * y) + y*sin(pi * x);
func f = pi^2 * uExactFunc;

/* Neumann boundary condition */
func NeumannBC = (sin(pi*y) + pi*y*cos(pi*x))* N.x + (pi*x*cos(pi*y) + sin(pi*x))* N.y;

/* Dirichlet boundary condition */
func uout = uExactFunc;

/* Define finite element space */
fespace Vh1(Th1, P1);
Vh1 u, v;

/* Variational formulation */
solve Poisson (u, v) =
    int2d(Th1)(dx(u) * dx(v) + dy(u) * dy(v)) /* Laplace operator */
    - int2d(Th1)(f * v) /* Right-hand side */
    - int1d(Th1, labelLeftInnerEllipse )(NeumannBC * v) /* Neumann condition on first inner boundary */
    - int1d(Th1, labelRightInnerEllipse )(NeumannBC * v) /* Neumann condition on second inner boundary */
    - int1d(Th1, labelInnerSmile)(NeumannBC * v) /* Neumann condition on smile */
    + on(labelOut, u = uout); /* Dirichlet condition on outer boundary */

int countVert = 0; /*the number of boundary edges of selected label*/
int label = 1; /*selectd label (outer boundary)*/
real centerOfLabelX;
real centerOfLabelY;
int nbBoundaryEdges = Th1.nbe; /*number of boundary edges */

/*create and work with file */
{
    /*create a file */
    ofstream filename("UCenterOfBoundaryEdges.txt");
    filename << "label = " << label << endl;

    /*Boundary Edges center coordinates and u(x, y)*/
    for(int it = 0; it < nbBoundaryEdges; it++){
        if (Th1.be(it).label == label){
            centerOfLabelX = (Th1.be(it)[0].x  + Th1.be(it)[1].x) / 2.0;
            centerOfLabelY = (Th1.be(it)[0].y  + Th1.be(it)[1].y) / 2.0;
            filename << "Center of Boundary Edge # " << it << 
            " : (x, y) = " << centerOfLabelX << ", " << centerOfLabelY << 
            "; u(x, y) = " << u(centerOfLabelX, centerOfLabelY) << endl;
            countVert++;
        }
    }

    /*Write a Number of boundary edges*/
    filename << "Number of boundary edges of selected label = " << countVert << endl;
}