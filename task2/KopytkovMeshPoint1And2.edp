int labelOut = 1;  /* label for outer circle*/
int labelLeftInnerEllipse = 2; /* label for left inner ellipse */
int labelRightInnerEllipse = 3; /* label for right inner ellipse */
int labelInnerSmile = 4; /* label for inner Smile*/

/* coordinates of circle */
real xMin = 1.0;
real xMax = 11.0;
real yMin = 1.0;
real yMax = 8.0;
real xCenter = (xMin + xMax) / 2.0;
real yCenter = (yMin + yMax) / 2.0;

real ROut = 12.0; /*radius of GammaOut*/

border GammaOut(t = 0.0, 2.0*pi){
    x = xCenter + ROut*cos(t);
    y = yCenter + ROut*sin(t);
    label = labelOut;
}

/*param of inner Ellipses*/
real aEll = 1.3;
real bEll = 0.7;
real xInLE = xMin;
real xInRE = xMax;
real ydist = 2.0; /*y-center offset*/
real ellDisp = (yMax + yMin)/2.0 + ydist; /*Elliptical displacement*/

border innerEllipse1(t=2*pi, 0.0){ 
    x = xInLE +  aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelLeftInnerEllipse ;
}

border innerEllipse2(t=2*pi, 0.0){ 
    x = xInRE + aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelRightInnerEllipse ;
}

/*param of Smile*/
real aSmile = 2.2;
real bSmile = 0.8;
real xSmile = xCenter;
real SmileDisp = (yMax + yMin)/2.0 - ydist; /*Elliptical displacement*/
real deform = 2.0; /*param of deform*/

/* Func for create a Smile */
func real deformation(real y) {
    return y * (1 - deform * y); /* “squeeze” the top */
}

/* Top part of Smile */
border upperEllipse(t = pi, 0) {
    x = xSmile + aSmile * cos(t);
    y = deformation(bSmile * sin(t)) + SmileDisp;
    label = labelInnerSmile;
}

/* Bottom part of Smile (for closing the loop) */
border lowerEllipse(t = 0, pi) {
    x = xSmile + aSmile * cos(t);
    y = -bSmile * sin(t) + SmileDisp;
    label = labelInnerSmile;
}

/*define u, f and boundary conditions*/
func uExactFunc = x*sin(pi * y) + y*sin(pi * x);
func f = pi^2 * uExactFunc;

/* Neumann boundary condition */
func NeumannBC = (sin(pi*y) + pi*y*cos(pi*x))* N.x + (pi*x*cos(pi*y) + sin(pi*x))* N.y;

/* Dirichlet boundary condition */
func uout = uExactFunc;

/* define the loop*/
real coef = 2.5;
int NIn = 20;
int NOut = int(coef * NIn);
real uErrorL2NormPrevious = 0.0;
real uErrorL2Norm = 0.0;
real uErrorExactRelL2Norm = 0.0;
real uOrderExact = 0.0;

/* define the loop for adaptmesh*/
real error = 0.1;
real hMinUExact = 0.01;
real hMaxUExact = 0.6;

/* Mesh for loop */
mesh Th1 = buildmesh(GammaOut(NOut)
    + innerEllipse1(NIn) + innerEllipse2(NIn)
    + upperEllipse(NIn) + lowerEllipse(NIn));

/* Define finite element space */
fespace Vh1(Th1, P1);
Vh1 u, v;

/* Variational formulation */
solve Poisson (u, v) =
    int2d(Th1)(dx(u) * dx(v) + dy(u) * dy(v)) /* Laplace operator */
    - int2d(Th1)(f * v) /* Right-hand side */
    - int1d(Th1, labelLeftInnerEllipse )(NeumannBC * v) /* Neumann condition on first inner boundary */
    - int1d(Th1, labelRightInnerEllipse )(NeumannBC * v) /* Neumann condition on second inner boundary */
    - int1d(Th1, labelInnerSmile)(NeumannBC * v) /* Neumann condition on smile */
    + on(labelOut, u = uout); /* Dirichlet condition on outer boundary */

real x1 = 2.0, y1 = 3.0;  /* start point */
real x2 = 9.0, y2 = 7.0;  /* end point */
int n = 50;  /* number of point */

/* Adaptmesh loop */
for (int j = 0; j < 5; j++){
    plot(Th1, wait=1, dim=2);
    Poisson;
    Th1 = adaptmesh(Th1, u, 
        err = error,
        hmin = hMinUExact,
        hmax = hMaxUExact,
        iso = true,
        nbvx = 150000 
    );

    Vh1 uExact = uExactFunc; /* Projection of exact solution onto Vh */
    Vh1 uErrorAbs = abs(u - uExact);

    /*The norm uExactFunc*/
    real uExactL2Norm = sqrt(
        int2d(Th1)( (uExact)^2 )
    );

    /*Absolute error with uExactFunc*/
    uErrorL2Norm = sqrt(
        int2d(Th1)( (uErrorAbs)^2 )
    );

    uErrorExactRelL2Norm = uErrorL2Norm / uExactL2Norm; /*relative error with uExactFunc*/

    if (j != 0){
        /*The order of convergence with uExactFunc */
        uOrderExact = log(uErrorL2NormPrevious / uErrorL2Norm) / log(2.0);
    }
    

    u=u;/*update a mesh*/

    cout << "error = " << error << endl;
    cout << "u[].n = "<< u[].n<< endl;
    cout << "|| uExact ||_L2 = " << uExactL2Norm  << endl;
    cout << "|| uErrorAbs ||_L2 = " << uErrorL2Norm << endl;
    cout << " uRelExact = " << uErrorExactRelL2Norm << endl;
    cout << " uOrderExact = " << uOrderExact << endl;

    plot(Th1, u, fill=0, dim=2, wait=1, value=1, nbiso=50);   

    /*create a file */
    ofstream file("OutputAdaptmesh" + j + ".txt");

    for (int i = 0; i < n; i++){
        real s = i;  /*param of section */
        real xi = x1 + i * (x2 - x1) / (n - 1);
        real yi = y1 + i * (y2 - y1) / (n - 1);
        real uValue = u(xi, yi);
        file << s << " " << uValue << endl;
    }

    /*update a param of adapt and order*/
    error=error/2;
    uErrorL2NormPrevious = uErrorL2Norm;
}
