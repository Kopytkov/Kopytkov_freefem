int labelOut = 1;  /* label for outer circle*/
int labelIn1 = 2; /* label for inner ellipse 1*/
int labelIn2 = 3; /* label for inner ellipse 2*/
int labelIn3 = 4; /* label for Smile*/

/* coordinates of circle */
real xMin = 1.0;
real xMax = 11.0;
real yMin = 1.0;
real yMax = 8.0;
real xCenter = (xMin + xMax) / 2.0;
real yCenter = (yMin + yMax) / 2.0;

real ROut = 12.0; /*radius of GammaOut*/

border GammaOut(t = 0.0, 2.0*pi){
    x = xCenter + ROut*cos(t);
    y = yCenter + ROut*sin(t);
    label = labelOut;
}

/*param of inner Ellipses*/
real aEll = 1.3;
real bEll = 0.7;
real xInE1 = xMin;
real xInE2 = xMax;
real ydist = 2.0; /*y-center offset*/
real ellDisp = (yMax + yMin)/2.0 + ydist; /*Elliptical displacement*/

border innerEllipse1(t=2*pi, 0.0){ 
    x = xInE1 +  aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelIn1;
}

border innerEllipse2(t=2*pi, 0.0){ 
    x = xInE2 + aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelIn2;
}

/*param of Smile*/
real aSmile = 2.2;
real bSmile = 0.8;
real xSmile = xCenter;
real SmileDisp = (yMax + yMin)/2.0 - ydist; /*Elliptical displacement*/
real deform = 2.0; /*param of deform*/

/* Func for create a Smile */
func real deformation(real y) {
    return y * (1 - deform * y); /* “squeeze” the top */
}

/* Top part of Smile */
border upperEllipse(t = pi, 0) {
    x = xSmile + aSmile * cos(t);
    y = deformation(bSmile * sin(t)) + SmileDisp;
    label = labelIn3;
}

/* Bottom part of Smile (for closing the loop) */
border lowerEllipse(t = 0, pi) {
    x = xSmile + aSmile * cos(t);
    y = -bSmile * sin(t) + SmileDisp;
    label = labelIn3;
}

/*define u, f and boundary conditions*/
func uExactFunc = x*sin(pi * y) + y*sin(pi * x);
func f = pi^2 * uExactFunc;

/* Neumann boundary condition */
func NeumannBC = (sin(pi*y) + pi*y*cos(pi*x))* N.x + (pi*x*cos(pi*y) + sin(pi*x))* N.y;

/* Dirichlet boundary condition */
func uout = uExactFunc;

/* define the loop*/
int [int] NIn = [10, 20, 40, 80, 160] * 2;
real coef = 2.5;
int [int] NOut = [int(coef * NIn[0]), int(coef * NIn[1]), 
    int(coef * NIn[2]), int(coef * NIn[3]), int(coef * NIn[4])];
real [int] uErrorL2Norm = [0.0, 0.0, 0.0, 0.0, 0.0];
real uErrorRelL2Norm = 0.0;
real uErrorExactRelL2Norm = 0.0;
real uOrderExact = 0.0;
real uOrder = 0.0;
real [int] uErrorUknL2Norm = [0.0, 0.0, 0.0, 0.0, 0.0];

for (int i = 0; i < 5; i++){

    /* Mesh for loop */
    mesh Th1 = buildmesh(GammaOut(NOut[i])
        + innerEllipse1(NIn[i]) + innerEllipse2(NIn[i])
        + upperEllipse(NIn[i]) + lowerEllipse(NIn[i]));
    plot(Th1, dim=2);

    /* Define finite element space */
    fespace Vh1(Th1, P1);
    Vh1 u1, v1;

    /* Variational formulation */
    solve Poisson (u1, v1) =
        int2d(Th1)(dx(u1) * dx(v1) + dy(u1) * dy(v1)) /* Laplace operator */
        - int2d(Th1)(f * v1) /* Right-hand side */
        - int1d(Th1, labelIn1)(NeumannBC * v1) /* Neumann condition on first inner boundary */
        - int1d(Th1, labelIn2)(NeumannBC * v1) /* Neumann condition on second inner boundary */
        - int1d(Th1, labelIn3)(NeumannBC * v1) /* Neumann condition on smile */
        + on(labelOut, u1 = uout); /* Dirichlet condition on outer boundary */

    /* Plot the solution */
    string plotTitle = "Laplace solution";
    plot(u1, value = true, fill = true, dim=2,
            nbiso=60, cmm=plotTitle);

    Vh1 uExact = uExactFunc; /* Projection of exact solution onto Vh */

    Vh1 uErrorAbs = abs(u1 - uExact);

    /*Absolute error with uExactFunc*/
    uErrorL2Norm[i] = sqrt(
        int2d(Th1)( (uErrorAbs)^2 )
    );

    /*The norm uExactFunc*/
    real uExactL2Norm = sqrt(
        int2d(Th1)( (uExact)^2 )
    );

    /*The norm u*/
    real uL2Norm = sqrt(
        int2d(Th1)( (u1)^2 )
    );

    uErrorExactRelL2Norm = uErrorL2Norm[i] / uExactL2Norm; /*relative error with uExactFunc*/

    if (i != 0){
        /*The order of convergence with uExactFunc */
        uOrderExact = log(uErrorL2Norm[i - 1] / uErrorL2Norm[i])/log(2.0);
    }

    /*Create a new solution to calculate the order of convergence without uExactFunc*/
    if (i != 4){
        mesh Th2 = buildmesh(GammaOut(NOut[i+1])
            + innerEllipse1(NIn[i+1]) + innerEllipse2(NIn[i+1])
            + upperEllipse(NIn[i+1]) + lowerEllipse(NIn[i+1]));

        /* Define finite element space */
        fespace Vh2(Th2, P1);
        Vh2 u2, v2;

        /* Variational formulation */
        solve Poisson (u2, v2) =
            int2d(Th2)(dx(u2) * dx(v2) + dy(u2) * dy(v2)) 
            - int2d(Th2)(f * v2)
            - int1d(Th2, labelIn1)(NeumannBC * v2)
            - int1d(Th2, labelIn2)(NeumannBC * v2)
            - int1d(Th2, labelIn3)(NeumannBC * v2)
            + on(labelOut, u2 = uout);

        Vh1 uErrorAbsUkn = abs(u1 - u2);

        uErrorUknL2Norm[i] = sqrt(
        int2d(Th1)( (uErrorAbsUkn)^2 )
        );

        uErrorRelL2Norm = uErrorUknL2Norm[i] / uL2Norm;

        if (i != 0){
            /*The order of convergence without uExactFunc */
            uOrder = log(uErrorUknL2Norm[i - 1] / uErrorUknL2Norm[i])/log(2.0);
        }
    }

    cout << "Parametr NOut = " << NOut[i] << endl;
    cout << "Parametr NIn = " << NIn[i] << endl;
    cout << "|| uExact ||_L2 = " << uExactL2Norm << endl;
    cout << "|| u_h ||_L2 = " << uL2Norm << endl;
    cout << "|| uErrorAbs ||_L2 = " << uErrorL2Norm[i] << endl;
    cout << "|| uErrorUknAbs ||_L2 = " << uErrorUknL2Norm[i] << endl;
    cout << " uRelExact = " << uErrorExactRelL2Norm << endl;
    cout << " uRel = " << uErrorRelL2Norm << endl;
    cout << " uOrderExact = " << uOrderExact << endl;
    cout << " uOrder = " << uOrder << endl;
}
