/* Func to solve SLAE BiCGStab */
func real[int] BiCGStabMethod(matrix& A, real[int]& rhs, real[int]& x0, real eps, int maxIter) {
    int n = rhs.n; // Size of sistem
    real[int] x(n), r(n), rTilde(n), v(n), p(n), s(n), t(n);

    /* Initial approximation and discrepancy */
    real rho = 1, rhoPrev = 1, alpha = 1, omega = 1, beta = 0;
    p = 0;
    v = 0;
    x = x0; 
    r = A * x;
    r = rhs - r;
    rTilde = r; /* Auxiliary vector */
    
    real rhsNorm = sqrt(rhs'*rhs); /*The norm of rhs */
    real rNorm = sqrt(r'*r); /*The norm of approximation */

    int iter = 0;
    
    /*Implementation of iterations*/
    while (rNorm / rhsNorm > eps && iter < maxIter) {
        rho = rTilde' * r;

        beta = (rho / rhoPrev) * (alpha / omega);

        p = p - v * omega;
        p = r + p * beta;

        v = A * p;

        alpha = rho / (rTilde' * v);
        
        s = r - alpha * v;
        
        t = A * s;

        omega = (t' * s) / (t' * t);
        
        x += omega * s + alpha * p;

        r = s - omega * t;

        rhoPrev = rho;
        
        rNorm = sqrt(r' * r);

        iter++;
    }
    
    /*Output result*/
    if (iter == maxIter) {
        cout << "Number of iter = " << maxIter << "  with accuracy " <<  rNorm / rhsNorm << endl;
    } else {
        cout << "BiCGStab is ended for " << iter << " iter with accuracy " << rNorm / rhsNorm << endl;
    }

    return x;
}

/* Test matrix */
matrix A = [[1, 3, 0, 2],
            [0, 5, 0, 6],
            [5, 0, 1, 0],
            [0, 10, 0, 3]];

real[int] rhs = [1, 2, 0, 4]; /* Vector of the right part */
real [int] x0 = 0; /*Vector of the initial approximation*/
real[int] x = BiCGStabMethod(A, rhs, x0, 1e-12, 100);

cout << "Solve: " << x << endl;
