/* include Func to solve SLAE BiCGStab */
include "KopytkovSolveSLAE.edp"
// include "BiCGStabNew.edp"

int labelOut = 1;  /* label for outer circle*/
int labelLeftInnerEllipse = 2; /* label for left inner ellipse */
int labelRightInnerEllipse = 3; /* label for right inner ellipse */
int labelInnerSmile = 4; /* label for inner Smile*/

/* coordinates of circle */
real xMin = 1.0;
real xMax = 11.0;
real yMin = 1.0;
real yMax = 8.0;
real xCenter = (xMin + xMax) / 2.0;
real yCenter = (yMin + yMax) / 2.0;

real ROut = 12.0; /*radius of GammaOut*/

border GammaOut(t = 0.0, 2.0*pi){
    x = xCenter + ROut*cos(t);
    y = yCenter + ROut*sin(t);
    label = labelOut;
}

/*param of inner Ellipses*/
real aEll = 1.3;
real bEll = 0.7;
real xInLE = xMin;
real xInRE = xMax;
real ydist = 2.0; /*y-center offset*/
real ellDisp = (yMax + yMin)/2.0 + ydist; /*Elliptical displacement*/

border innerEllipse1(t=2*pi, 0.0){ 
    x = xInLE +  aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelLeftInnerEllipse ;
}

border innerEllipse2(t=2*pi, 0.0){ 
    x = xInRE + aEll*cos(t); 
    y = bEll*sin(t) + ellDisp;
    label = labelRightInnerEllipse ;
}

/*param of Smile*/
real aSmile = 2.2;
real bSmile = 0.8;
real xSmile = xCenter;
real SmileDisp = (yMax + yMin)/2.0 - ydist; /*Elliptical displacement*/
real deform = 2.0; /*param of deform*/

/* Func for create a Smile */
func real deformation(real y) {
    return y * (1 - deform * y); /* “squeeze” the top */
}

/* Top part of Smile */
border upperEllipse(t = pi, 0) {
    x = xSmile + aSmile * cos(t);
    y = deformation(bSmile * sin(t)) + SmileDisp;
    label = labelInnerSmile;
}

/* Bottom part of Smile (for closing the loop) */
border lowerEllipse(t = 0, pi) {
    x = xSmile + aSmile * cos(t);
    y = -bSmile * sin(t) + SmileDisp;
    label = labelInnerSmile;
}

/*define u, f and boundary conditions*/
func uExactFunc = x*sin(pi * y) + y*sin(pi * x);
func f = pi^2 * uExactFunc;

/* Dirichlet boundary condition */
func uOut = uExactFunc;
func uIn = uExactFunc;

int NIn = 70;
real coef = 2.5;
int NOut = int(coef * NIn);
real[int] tgvValues = [-1, 1e5, 1e8, 1e10, 1e30];
for (int i = 0; i < tgvValues.n; i++) {
    real tgv = tgvValues[i];

    /* define loop and mesh */
    mesh Th = buildmesh(GammaOut(NOut)
        + innerEllipse1(NIn) + innerEllipse2(NIn)
        + upperEllipse(NIn) + lowerEllipse(NIn));
    // plot(Th, dim=2);
    fespace Vh(Th, P1);
    Vh u, v; 
    
    /* Assembling the matrix and vector of the right part */
    varf LaplaceBilinearForm(u, v) = 
        int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v)) 
        + on(labelOut, u=uOut)
        + on(labelLeftInnerEllipse, u=uIn)
        + on(labelRightInnerEllipse, u=uIn)
        + on(labelInnerSmile, u=uIn);
    varf RhsLinearForm(u, v) = 
        int2d(Th)( f*v )
        + on(labelOut, u=uOut)
        + on(labelLeftInnerEllipse, u=uIn)
        + on(labelRightInnerEllipse, u=uIn)
        + on(labelInnerSmile, u=uIn);
    
    matrix A = LaplaceBilinearForm(Vh, Vh, tgv=tgv);
    real[int] rhs = RhsLinearForm(0, Vh, tgv=tgv);

    /* The solution using the BiCGStab method */
    real[int] uBicg = BiCGStabMethod(A, rhs, 1e-12, 10000);

    /* Solution using MUMPS_seq for comparison */
    load "MUMPS_seq"
    set(A, solver = sparsesolver, eps = 1e-12);
    real[int] uMumps = A^-1 * rhs;

    /* Projections on Vh */
    Vh uMumpsProj = uMumps;
    Vh uExact = uExactFunc;
    Vh uBicgProj = uBicg;
    Vh uErrorBicg = abs(uBicgProj - uExact);
    Vh uErrorMumps= abs(uMumpsProj - uExact);

    /*Calculating the norm of numerical and exact solutions*/
    real uMumpsNormL2 = sqrt(
        int2d(Th)( (uMumpsProj)^2 )
    );

    real uBicgNormL2 = sqrt(
        int2d(Th)( (uBicgProj)^2 )
    );

    real uExactNormL2 = sqrt(
        int2d(Th)( (uExact)^2 )
    );    

    /* Calculation of the relative error in the L2 norm */
    real uErrorBicgL2 = sqrt(
        int2d(Th)( (uErrorBicg)^2 )
    );

    real uErrorMumpsL2 = sqrt(
        int2d(Th)( (uErrorMumps)^2 )
    );

    real uRelBicgL2 = uErrorBicgL2 / uExactNormL2;
    real uRelMumpsL2 = uErrorMumpsL2 / uExactNormL2;

    cout << "tgv = " << tgv << endl;
    cout << "|| uMumps || L_2 = " << uMumpsNormL2 << endl;
    cout << "|| uBicg || L_2 = " << uBicgNormL2 << endl;
    cout << "|| uExact || L_2 = " << uExactNormL2 << endl;
    cout << "|| uErrorBicg || L_2 = " << uErrorBicgL2 << endl;
    cout << "|| uErrorMumps || L_2 = " << uErrorMumpsL2 << endl;
    cout << "uRelBicgL2 = " << uRelBicgL2 << endl;
    cout << "uRelMumpsL2 = " << uRelMumpsL2 << endl;
}
